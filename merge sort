//
//  mergeSortApp.swift
//  mergeSort
//
//  Created by Raife Armstrong on 13/11/23.
//


import SwiftUI




import Foundation
let array = [2,9,6,8,4]
func mergeSort(array : [Int]) -> [Int]{
    if array.count>1{
        let mid=array.count/2
        let leftArray: ([Int]) = Array(array[0..<mid])
        let rightArray: ([Int]) = Array(array[mid..<array.count])
        
        let sortedLeft = mergeSort(array: leftArray)
        let sortedRight = mergeSort(array: rightArray)
        
        return merge(sortedLeft,sortedRight)
    }else{
        return array
    }
}


func merge(_ leftArray: [Int],_ rightArray: [Int]) -> [Int]{
    var output: [Int] = []
    var leftIndex = 0
    var rightIndex = 0
    
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        let leftNum = leftArray[leftIndex]
        let rightNum = rightArray[rightIndex]
        
        if leftNum < rightNum {
            output.append(leftNum)
            leftIndex += 1
        } else {
            output.append(rightNum)
            rightIndex += 1
        }
        
    }
    if leftIndex < leftArray.count{
        output.append(contentsOf: leftArray[leftIndex...])
    }else{
        output.append(contentsOf: rightArray[rightIndex...])
    }
    return output
}


let sorted = mergeSort(array : array)













//
//  mergeSortTests.swift
//  mergeSortTests
//
//  Created by Raife Armstrong on 13/11/23.
//


import XCTest
@testable import mergeSort


final class mergeSortTests: XCTestCase {


    func testCheckingWeatherTheMergeSortReturnsTheSortedListFromGreatestToSmallest() {
        //arrange
        let testCases = [([38, 27, 43, 3, 9, 82, 10], [3, 9, 10, 27, 38, 43, 82]),([5, 2, 7, 1, 8, 4, 3, 6], [1, 2, 3, 4, 5, 6, 7, 8]),([9, 1, 5, 3, 7, 2, 8, 4, 6, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])]
            //act


        for testCase in testCases {
            let result: ([Int]) = mergeSort(array: testCase.0)
            XCTAssertEqual(result, testCase.1)
        }
    }


    func testMergeSortSpeed()  {
        
        self.measure {
            let testCases = [([38, 27, 43, 3, 9, 82, 10], [3, 9, 10, 27, 38, 43, 82]),([5, 2, 7, 1, 8, 4, 3, 6], [1, 2, 3, 4, 5, 6, 7, 8]),([9, 1, 5, 3, 7, 2, 8, 4, 6, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])]
                //act


            for testCase in testCases {
                let result = mergeSort(array: testCase.0)
            }
        }
    }


}

